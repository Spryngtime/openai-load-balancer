/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "./core";
import * as errors from "./errors";
import * as AzianmikeApi from "./api";
import * as serializers from "./serialization";
import urlJoin from "url-join";
import { UsageTracking } from "./api/resources/usageTracking/client/Client";

export declare namespace AzianmikeApiClient {
    interface Options {
        environment: core.Supplier<string>;
        apiKey?: core.Supplier<string | undefined>;
    }

    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}

export class AzianmikeApiClient {
    constructor(protected readonly _options: AzianmikeApiClient.Options) {}

    public async get(requestOptions?: AzianmikeApiClient.RequestOptions): Promise<void> {
        const _response = await core.fetcher({
            url: await core.Supplier.get(this._options.environment),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "test-analytics-sdk",
                "X-Fern-SDK-Version": "0.0.15",
            },
            contentType: "application/json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.AzianmikeApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AzianmikeApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AzianmikeApiTimeoutError();
            case "unknown":
                throw new errors.AzianmikeApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async postUsers(
        request: AzianmikeApi.PostUsersRequest = {},
        requestOptions?: AzianmikeApiClient.RequestOptions
    ): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(await core.Supplier.get(this._options.environment), "users"),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "test-analytics-sdk",
                "X-Fern-SDK-Version": "0.0.15",
            },
            contentType: "application/json",
            body: await serializers.PostUsersRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.AzianmikeApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AzianmikeApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AzianmikeApiTimeoutError();
            case "unknown":
                throw new errors.AzianmikeApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected _usageTracking: UsageTracking | undefined;

    public get usageTracking(): UsageTracking {
        return (this._usageTracking ??= new UsageTracking(this._options));
    }

    protected async _getAuthorizationHeader() {
        const value = await core.Supplier.get(this._options.apiKey);
        if (value != null) {
            return value;
        }

        return undefined;
    }
}
